// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/currencies.proto

package currencies

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrenciesClient is the client API for Currencies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrenciesClient interface {
	GetAvailableCurrencies(ctx context.Context, in *CurrencyType, opts ...grpc.CallOption) (*CurrencyCodes, error)
	GetAvailableBankByCurrency(ctx context.Context, in *CurrencyCode, opts ...grpc.CallOption) (*BankNames, error)
	SetCurrency(ctx context.Context, in *FullCurrency, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMyCurrencies(ctx context.Context, in *CurrencyType, opts ...grpc.CallOption) (*FullCurrencies, error)
	DeleteCurrency(ctx context.Context, in *FullCurrency, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type currenciesClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrenciesClient(cc grpc.ClientConnInterface) CurrenciesClient {
	return &currenciesClient{cc}
}

func (c *currenciesClient) GetAvailableCurrencies(ctx context.Context, in *CurrencyType, opts ...grpc.CallOption) (*CurrencyCodes, error) {
	out := new(CurrencyCodes)
	err := c.cc.Invoke(ctx, "/binance_converter.backend_api.currencies.currencies/GetAvailableCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesClient) GetAvailableBankByCurrency(ctx context.Context, in *CurrencyCode, opts ...grpc.CallOption) (*BankNames, error) {
	out := new(BankNames)
	err := c.cc.Invoke(ctx, "/binance_converter.backend_api.currencies.currencies/GetAvailableBankByCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesClient) SetCurrency(ctx context.Context, in *FullCurrency, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/binance_converter.backend_api.currencies.currencies/SetCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesClient) GetMyCurrencies(ctx context.Context, in *CurrencyType, opts ...grpc.CallOption) (*FullCurrencies, error) {
	out := new(FullCurrencies)
	err := c.cc.Invoke(ctx, "/binance_converter.backend_api.currencies.currencies/GetMyCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesClient) DeleteCurrency(ctx context.Context, in *FullCurrency, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/binance_converter.backend_api.currencies.currencies/DeleteCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrenciesServer is the server API for Currencies service.
// All implementations must embed UnimplementedCurrenciesServer
// for forward compatibility
type CurrenciesServer interface {
	GetAvailableCurrencies(context.Context, *CurrencyType) (*CurrencyCodes, error)
	GetAvailableBankByCurrency(context.Context, *CurrencyCode) (*BankNames, error)
	SetCurrency(context.Context, *FullCurrency) (*emptypb.Empty, error)
	GetMyCurrencies(context.Context, *CurrencyType) (*FullCurrencies, error)
	DeleteCurrency(context.Context, *FullCurrency) (*emptypb.Empty, error)
	mustEmbedUnimplementedCurrenciesServer()
}

// UnimplementedCurrenciesServer must be embedded to have forward compatible implementations.
type UnimplementedCurrenciesServer struct {
}

func (UnimplementedCurrenciesServer) GetAvailableCurrencies(context.Context, *CurrencyType) (*CurrencyCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCurrencies not implemented")
}
func (UnimplementedCurrenciesServer) GetAvailableBankByCurrency(context.Context, *CurrencyCode) (*BankNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableBankByCurrency not implemented")
}
func (UnimplementedCurrenciesServer) SetCurrency(context.Context, *FullCurrency) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrency not implemented")
}
func (UnimplementedCurrenciesServer) GetMyCurrencies(context.Context, *CurrencyType) (*FullCurrencies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyCurrencies not implemented")
}
func (UnimplementedCurrenciesServer) DeleteCurrency(context.Context, *FullCurrency) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrency not implemented")
}
func (UnimplementedCurrenciesServer) mustEmbedUnimplementedCurrenciesServer() {}

// UnsafeCurrenciesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrenciesServer will
// result in compilation errors.
type UnsafeCurrenciesServer interface {
	mustEmbedUnimplementedCurrenciesServer()
}

func RegisterCurrenciesServer(s grpc.ServiceRegistrar, srv CurrenciesServer) {
	s.RegisterService(&Currencies_ServiceDesc, srv)
}

func _Currencies_GetAvailableCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServer).GetAvailableCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_converter.backend_api.currencies.currencies/GetAvailableCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServer).GetAvailableCurrencies(ctx, req.(*CurrencyType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currencies_GetAvailableBankByCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServer).GetAvailableBankByCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_converter.backend_api.currencies.currencies/GetAvailableBankByCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServer).GetAvailableBankByCurrency(ctx, req.(*CurrencyCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currencies_SetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServer).SetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_converter.backend_api.currencies.currencies/SetCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServer).SetCurrency(ctx, req.(*FullCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currencies_GetMyCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServer).GetMyCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_converter.backend_api.currencies.currencies/GetMyCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServer).GetMyCurrencies(ctx, req.(*CurrencyType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currencies_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_converter.backend_api.currencies.currencies/DeleteCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServer).DeleteCurrency(ctx, req.(*FullCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

// Currencies_ServiceDesc is the grpc.ServiceDesc for Currencies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Currencies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binance_converter.backend_api.currencies.currencies",
	HandlerType: (*CurrenciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableCurrencies",
			Handler:    _Currencies_GetAvailableCurrencies_Handler,
		},
		{
			MethodName: "GetAvailableBankByCurrency",
			Handler:    _Currencies_GetAvailableBankByCurrency_Handler,
		},
		{
			MethodName: "SetCurrency",
			Handler:    _Currencies_SetCurrency_Handler,
		},
		{
			MethodName: "GetMyCurrencies",
			Handler:    _Currencies_GetMyCurrencies_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _Currencies_DeleteCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/currencies.proto",
}
