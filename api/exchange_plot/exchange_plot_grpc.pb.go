// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/exchange_plot.proto

package exchange_plot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangePlotClient is the client API for ExchangePlot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangePlotClient interface {
	GetExchangePlot(ctx context.Context, in *PlotParams, opts ...grpc.CallOption) (*Plot, error)
}

type exchangePlotClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangePlotClient(cc grpc.ClientConnInterface) ExchangePlotClient {
	return &exchangePlotClient{cc}
}

func (c *exchangePlotClient) GetExchangePlot(ctx context.Context, in *PlotParams, opts ...grpc.CallOption) (*Plot, error) {
	out := new(Plot)
	err := c.cc.Invoke(ctx, "/binance_converter.backend_api.exchange_plot.exchangePlot/GetExchangePlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangePlotServer is the server API for ExchangePlot service.
// All implementations must embed UnimplementedExchangePlotServer
// for forward compatibility
type ExchangePlotServer interface {
	GetExchangePlot(context.Context, *PlotParams) (*Plot, error)
	mustEmbedUnimplementedExchangePlotServer()
}

// UnimplementedExchangePlotServer must be embedded to have forward compatible implementations.
type UnimplementedExchangePlotServer struct {
}

func (UnimplementedExchangePlotServer) GetExchangePlot(context.Context, *PlotParams) (*Plot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangePlot not implemented")
}
func (UnimplementedExchangePlotServer) mustEmbedUnimplementedExchangePlotServer() {}

// UnsafeExchangePlotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangePlotServer will
// result in compilation errors.
type UnsafeExchangePlotServer interface {
	mustEmbedUnimplementedExchangePlotServer()
}

func RegisterExchangePlotServer(s grpc.ServiceRegistrar, srv ExchangePlotServer) {
	s.RegisterService(&ExchangePlot_ServiceDesc, srv)
}

func _ExchangePlot_GetExchangePlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlotParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangePlotServer).GetExchangePlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_converter.backend_api.exchange_plot.exchangePlot/GetExchangePlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangePlotServer).GetExchangePlot(ctx, req.(*PlotParams))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangePlot_ServiceDesc is the grpc.ServiceDesc for ExchangePlot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangePlot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binance_converter.backend_api.exchange_plot.exchangePlot",
	HandlerType: (*ExchangePlotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExchangePlot",
			Handler:    _ExchangePlot_GetExchangePlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/exchange_plot.proto",
}
